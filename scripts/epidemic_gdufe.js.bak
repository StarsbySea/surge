/*

## ---------- Surge ---------- ##
[Script]
# > 广东财经大学日检日报获取JWSESSION (student.wozaixiaoyuan.com)
广东财经大学日检日报获取JWSESSION = type=http-request, pattern=^https?:\/\/student\.wozaixiaoyuan\.com\/health\/(getToday|save)\.json, requires-body=1, max-size=-1, script-path=https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js
# > 广东财经大学日检日报
广东财经大学日检日报 = type=cron, cronexp="0 3 0,7,12,18 * * *", wake-system=1, timeout=180, script-path=https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js

[MITM]
hostname = %APPEND% student.wozaixiaoyuan.com

## ---------- Loon ---------- ##
[Script]
# > 广东财经大学日检日报获取JWSESSION (student.wozaixiaoyuan.com)
http-request ^https?:\/\/student\.wozaixiaoyuan\.com\/health\/(getToday|save)\.json script-path=https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js, requires-body=true, timeout=10, tag=广东财经大学日检日报获取JWSESSION
# > 广东财经大学日检日报
cron "0 3 0,7,12,18 * * *" script-path=https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js, tag=广东财经大学日检日报

[MITM]
hostname = student.wozaixiaoyuan.com

## ---------- Quantumult X ---------- ##
[rewrite_local]
# > 广东财经大学日检日报获取JWSESSION (student.wozaixiaoyuan.com)
^https?:\/\/student\.wozaixiaoyuan\.com\/health\/(getToday|save)\.json url script-request-header https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js

[task_local]
# > 广东财经大学日检日报
3 0,7,12,18 * * * https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js, tag=广东财经大学日检日报, enabled=true

[mitm]
hostname = student.wozaixiaoyuan.com

regex: ^https?:\/\/student\.wozaixiaoyuan\.com\/health\/(getToday|save)\.json
git: https://github.com/chiupam/surge/blob/main/scripts/epidemic_gdufe.js
raw: https://raw.githubusercontent.com/chiupam/surge/main/scripts/epidemic_gdufe.js
sgmoudule: https://raw.githubusercontent.com/chiupam/surge/main/Surge/Task.sgmodule
boxjs: https://raw.githubusercontent.com/chiupam/surge/main/boxjs/chiupam.boxjs.json

*/

const $ = new Env()
const appName = `🌼 广东财经大学日检日报 🌼`
const host = `https://student.wozaixiaoyuan.com/`
const inSchool = $.read("gdufe_inSchool")
const JWSESSION = $.read("gdufe_JWSESSION")
const illustrate = `微信 => 小程序 => 我在校园 => 登录 => (点击健康打卡或日检日报填报)`
const nowHours = new Date().getHours()
typeof $request !== 'undefined' ? set() : main()

function set() {
  const Method = $request.method
  if ($request.headers && (Method == "POST" || Method == "GET")) {
    if ($request.headers.JWSESSION != JWSESSION || !JWSESSION) {
      $.write($request.headers.JWSESSION, "gdufe_JWSESSION")
      $.notice(appName, "【成功】写入 JWSESSION 成功！🎉", $request.headers.JWSESSION)
    } else if ($request.url.indexOf("save") != -1) {
      const body = $response.body.split("&")
      const arr = ["province", "city", "district", "township", "street", "areacode", "latitude", "longitude"]
      const arr_cn = ["所在省份", "所在城市", "所在行政区", "所在街道", "所在道路", "所在地邮政编码", "纬度", "经度"]
      var writein = ""
      for (var m = 0; m < body.length; m++) {
        for (var n = 0; n < arr.length; n++) {
          if (body[m].indexOf(arr[n]) != -1) {
            $.write(decodeURIComponent(body[m].split("=")[1]), `gdufe_${arr[n]}`)
            writein += `${arr_cn[n]}：${decodeURIComponent(body[m].split("=")[1])}\n`
          }
        }
      }
      $.notice(appName, ``, `【成功】写入打卡数据成功！🎉`, writein)
    }
  } else {
    $.notice(appName, "", "【失败】无法读取 headers 啊，自查原因！🤦‍♂️")
  }
  $.done()
}

function main() {
  const options = {
    url: `${host}heat/getTodayHeatList.json`,
    headers: {"JWSESSION": JWSESSION}
  }
  $.post(options, (err, resp, data) => {
    if (data) {
      $.log(data)
      const res = JSON.parse(data)
      if (res.code != -10) {
        if (0 <= nowHours && nowHours < 9) {
          i = 0
          period = `晨检`
        } else if (11 <= nowHours && nowHours < 15) {
          i = 1
          period = `午检`
        } else if (17 <= nowHours && nowHours < 23) {
          i = 2
          period = `晚检`
        } else {
          i = -1
          period = `未在`
        }
        if (i != -1) {
          /*
           * 未开始、未打卡 {"endTime":"15:00","seq":2,"startTime":"11:00","state":0,"type":0}
           * 已开始、未打卡 {"endTime":"15:00","seq":2,"startTime":"11:00","state":1,"type":0}
           * 已开始、已打卡 {"endTime":"15:00","seq":2,"startTime":"11:00","state":1,"type":1}
           * 已结束、已打卡 {"endTime":"15:00","seq":2,"startTime":"11:00","state":2,"type":1}
           * state 0 => 未开启 1 => 进行中 2 => 已结束
           *  type 0 => 未打卡 1 => 已打卡
          */
          const state = res.data[i].state
          const type = res.data[i].type
          const seq = res.data[i].seq
          if (state == 1 && type == 0) { // 进行中、未打卡
            sign(period, seq)
          } else if (state == 1 && type == 1) { // 进行中、已打卡
            $.notice(appName, `【重复】${period}重复打卡！🤦‍♂️`, ``)
            $.done()
          } else {
            $.notice(appName, `【严重】${period}打卡出现错误！🤦‍♂️`, ``)
            $.done()
          }
        } else {
          $.notice(appName, `【失败】打卡失败！🤦‍♂️`, `说明：${period}规定的时间范围内！`)
          $.done()
        }  
      } else {
        $.notice(appName, `【过期】按下列步骤获取 JWSESSION 噢！🤯`, illustrate)
        $.done()
      }
    } else {
      $.notice(appName, `【严重】API请求失败🤯`, err)
      $.log(`API请求失败！`)
      $.log(err)
      $.done()
    }
  })
}

function sign(t, e) {
  if (JWSESSION) {
    const answers = `answers=["0"]&`
    const userId = `userId=&`
    const myArea = `myArea=&`
    const temperature = `temperature=36.0&`
    const seq = `seq=${e}&`
    const country = `country=中国&` // 国家
    const province = `province=${inSchool == "true" ? "广东省" : $.read("gdufe_province")}&` // 省份
    const city = `city=${inSchool == "true" ? "佛山市" : $.read("gdufe_city")}&` // 城市
    const district = `district=${inSchool == "true" ? "三水区" : $.read("gdufe_district")}&` // 行政区
    const township = `township=${inSchool == "true" ? "云东海街道" : $.read("gdufe_township")}&` // 街道
    const street = `street=${inSchool == "true" ? "大学路" : $.read("gdufe_street")}&` // 路段
    const areacode = `areacode=${inSchool == "true" ? "440607" : $.read("gdufe_areacode")}`// 邮编编码
    const latitude = `latitude=${inSchool == "true" ? "23.208688735961914" : $.read("gdufe_latitude")}&` // 纬度
    const longitude = `longitude=${inSchool == "true" ? "112.85215759277344" : $.read("gdufe_longitude")}&` // 经度
    const body0 = `${answers}${seq}${temperature}${userId}${latitude}${longitude}`
    const body1 = `${country}${province}${city}${district}${township}${street}`
    const body2 = `${myArea}${areacode}`
    const options = {
      url: `${host}heat/save.json`,
      headers: {"JWSESSION": JWSESSION},
      body: encodeURI(`${body0}${body1}${body2}`)
    }
    $.post(options, (err, resp, data) => {
      if (data) {
        $.log(data)
        const res = JSON.parse(data)
        if (res.code == 0) {
          $.notice(appName, `【成功】${t}打卡成功！🎉`, ``)
        } else {
          $.notice(appName, `【严重】发生其他类型错误！🤦‍♂️`, `返回包：${data}`)
        }
      } else {
        $.log(`API请求失败！`)
        $.log(err)
      }
      $.done()
    })
  } else {
    $.notice(appName, `【错误】还没获取 JWSESSION 的值！🤦‍♂️`, illustrate)
  }
}

function Env() {
  LN = typeof $loon != "undefined"
  SG = typeof $httpClient != "undefined" && !LN
  QX = typeof $task != "undefined"
  read = (key) => {
    if (LN || SG) return $persistentStore.read(key)
    if (QX) return $prefs.valueForKey(key)
  }
  write = (key, val) => {
    if (LN || SG) return $persistentStore.write(key, val); 
    if (QX) return $prefs.setValueForKey(key, val)
  }
  notice = (title, subtitle, message, url) => {
    if (LN) $notification.post(title, subtitle, message, url)
    if (SG) $notification.post(title, subtitle, message, { url: url })
    if (QX) $notify(title, subtitle, message, { "open-url": url })
  }
  get = (url, cb) => {
    if (LN || SG) {$httpClient.get(url, cb)}
    if (QX) {url.method = 'GET'; $task.fetch(url).then((resp) => cb(null, {}, resp.body))}
  }
  post = (url, cb) => {
    if (LN || SG) {$httpClient.post(url, cb)}
    if (QX) {url.method = 'POST'; $task.fetch(url).then((resp) => cb(null, {}, resp.body))}
  }
  put = (url, cb) => {
    if (LN || SG) {$httpClient.put(url, cb)}
    if (QX) {url.method = 'PUT'; $task.fetch(url).then((resp) => cb(null, {}, resp.body))}
  }
  log = (message) => console.log(message)
  done = (value = {}) => {$done(value)}
  return { LN, SG, QX, read, write, notice, get, post, put, log, done }
}
